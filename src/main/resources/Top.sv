// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module Multiplier(
  input        io_aSign,
               io_bSign,
  input  [2:0] io_a,
               io_b,
  output [8:0] io_out
);

  wire [7:0] _sum_T_4 =
    {4'h0, io_b[0] ? {1'h1, io_a} : 4'h0} + {3'h0, io_b[1] ? {1'h1, io_a, 1'h0} : 5'h0}
    + {2'h0, io_b[2] ? {1'h1, io_a, 2'h0} : 6'h0} + {2'h1, io_a, 3'h0};
  wire       outSign = io_aSign ^ io_bSign;
  assign io_out = {outSign, outSign ? ~_sum_T_4 + 8'h1 : _sum_T_4};
endmodule

module FiveBitsAdder(
  input  [3:0] io_a,
               io_b,
  output [5:0] io_out
);

  wire [4:0] _aNobias_T_2 = {1'h0, io_a} - 5'h7;
  wire [4:0] _bNobias_T_2 = {1'h0, io_b} - 5'h7;
  assign io_out = {_aNobias_T_2[4], _aNobias_T_2} + {_bNobias_T_2[4], _bNobias_T_2};
endmodule

module RightShifter(
  input         clock,
  input  [8:0]  io_inProduct,
  input  [5:0]  io_inExp,
  output [36:0] io_out
);

  reg [15:0] shiftReg;
  reg [2:0]  highShiftAmountReg;
  always @(posedge clock) begin
    automatic logic [5:0] _shiftAmount_T = 6'h10 - io_inExp;
    shiftReg <= $signed($signed({io_inProduct, 7'h0}) >>> _shiftAmount_T[2:0]);
    highShiftAmountReg <= _shiftAmount_T[5:3];
  end // always @(posedge)
  assign io_out =
    $signed($signed({shiftReg, 21'h0}) >>> {31'h0, highShiftAmountReg, 3'h0});
endmodule

module Reduction(
  input  [36:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
                io_in_4,
                io_in_5,
                io_in_6,
                io_in_7,
  output [37:0] io_out_0,
                io_out_1,
                io_out_2,
                io_out_3
);

  assign io_out_0 = {io_in_0[36], io_in_0} + {io_in_1[36], io_in_1};
  assign io_out_1 = {io_in_2[36], io_in_2} + {io_in_3[36], io_in_3};
  assign io_out_2 = {io_in_4[36], io_in_4} + {io_in_5[36], io_in_5};
  assign io_out_3 = {io_in_6[36], io_in_6} + {io_in_7[36], io_in_7};
endmodule

module Reduction_1(
  input  [37:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
  output [38:0] io_out_0,
                io_out_1
);

  assign io_out_0 = {io_in_0[37], io_in_0} + {io_in_1[37], io_in_1};
  assign io_out_1 = {io_in_2[37], io_in_2} + {io_in_3[37], io_in_3};
endmodule

module Reduction_2(
  input  [38:0] io_in_0,
                io_in_1,
  output [39:0] io_out_0
);

  assign io_out_0 = {io_in_0[38], io_in_0} + {io_in_1[38], io_in_1};
endmodule

module Fpu(
  input         clock,
                reset,
  input  [7:0]  io_a_0,
                io_a_1,
                io_a_2,
                io_a_3,
                io_a_4,
                io_a_5,
                io_a_6,
                io_a_7,
                io_b_0,
                io_b_1,
                io_b_2,
                io_b_3,
                io_b_4,
                io_b_5,
                io_b_6,
                io_b_7,
  input         io_clear,
  output [43:0] io_out
);

  wire [39:0] _reduction3_io_out_0;
  wire [38:0] _reduction2_io_out_0;
  wire [38:0] _reduction2_io_out_1;
  wire [37:0] _reduction_io_out_0;
  wire [37:0] _reduction_io_out_1;
  wire [37:0] _reduction_io_out_2;
  wire [37:0] _reduction_io_out_3;
  wire [36:0] _rightShifter_7_io_out;
  wire [36:0] _rightShifter_6_io_out;
  wire [36:0] _rightShifter_5_io_out;
  wire [36:0] _rightShifter_4_io_out;
  wire [36:0] _rightShifter_3_io_out;
  wire [36:0] _rightShifter_2_io_out;
  wire [36:0] _rightShifter_1_io_out;
  wire [36:0] _rightShifter_0_io_out;
  wire [5:0]  _fiveBitsAdder_7_io_out;
  wire [5:0]  _fiveBitsAdder_6_io_out;
  wire [5:0]  _fiveBitsAdder_5_io_out;
  wire [5:0]  _fiveBitsAdder_4_io_out;
  wire [5:0]  _fiveBitsAdder_3_io_out;
  wire [5:0]  _fiveBitsAdder_2_io_out;
  wire [5:0]  _fiveBitsAdder_1_io_out;
  wire [5:0]  _fiveBitsAdder_0_io_out;
  wire [8:0]  _multiplier_7_io_out;
  wire [8:0]  _multiplier_6_io_out;
  wire [8:0]  _multiplier_5_io_out;
  wire [8:0]  _multiplier_4_io_out;
  wire [8:0]  _multiplier_3_io_out;
  wire [8:0]  _multiplier_2_io_out;
  wire [8:0]  _multiplier_1_io_out;
  wire [8:0]  _multiplier_0_io_out;
  reg  [7:0]  aReg_0;
  reg  [7:0]  aReg_1;
  reg  [7:0]  aReg_2;
  reg  [7:0]  aReg_3;
  reg  [7:0]  aReg_4;
  reg  [7:0]  aReg_5;
  reg  [7:0]  aReg_6;
  reg  [7:0]  aReg_7;
  reg  [7:0]  bReg_0;
  reg  [7:0]  bReg_1;
  reg  [7:0]  bReg_2;
  reg  [7:0]  bReg_3;
  reg  [7:0]  bReg_4;
  reg  [7:0]  bReg_5;
  reg  [7:0]  bReg_6;
  reg  [7:0]  bReg_7;
  reg  [43:0] acc;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & ~reset) begin
        $fwrite(32'h80000002, "reducedProduct(1): %b\n", _reduction_io_out_1);
        $fwrite(32'h80000002, "reducedProduct3  : %b\n", _reduction3_io_out_0);
        $fwrite(32'h80000002, "acc              : %b\n", acc);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      aReg_0 <= 8'h0;
      aReg_1 <= 8'h0;
      aReg_2 <= 8'h0;
      aReg_3 <= 8'h0;
      aReg_4 <= 8'h0;
      aReg_5 <= 8'h0;
      aReg_6 <= 8'h0;
      aReg_7 <= 8'h0;
      bReg_0 <= 8'h0;
      bReg_1 <= 8'h0;
      bReg_2 <= 8'h0;
      bReg_3 <= 8'h0;
      bReg_4 <= 8'h0;
      bReg_5 <= 8'h0;
      bReg_6 <= 8'h0;
      bReg_7 <= 8'h0;
      acc <= 44'h0;
    end
    else begin
      aReg_0 <= io_a_0;
      aReg_1 <= io_a_1;
      aReg_2 <= io_a_2;
      aReg_3 <= io_a_3;
      aReg_4 <= io_a_4;
      aReg_5 <= io_a_5;
      aReg_6 <= io_a_6;
      aReg_7 <= io_a_7;
      bReg_0 <= io_b_0;
      bReg_1 <= io_b_1;
      bReg_2 <= io_b_2;
      bReg_3 <= io_b_3;
      bReg_4 <= io_b_4;
      bReg_5 <= io_b_5;
      bReg_6 <= io_b_6;
      bReg_7 <= io_b_7;
      if (io_clear)
        acc <= {{4{_reduction3_io_out_0[39]}}, _reduction3_io_out_0};
      else
        acc <= acc + {{4{_reduction3_io_out_0[39]}}, _reduction3_io_out_0};
    end
  end // always @(posedge)
  Multiplier multiplier_0 (
    .io_aSign (aReg_0[7]),
    .io_bSign (bReg_0[7]),
    .io_a     (aReg_0[2:0]),
    .io_b     (bReg_0[2:0]),
    .io_out   (_multiplier_0_io_out)
  );
  Multiplier multiplier_1 (
    .io_aSign (aReg_1[7]),
    .io_bSign (bReg_1[7]),
    .io_a     (aReg_1[2:0]),
    .io_b     (bReg_1[2:0]),
    .io_out   (_multiplier_1_io_out)
  );
  Multiplier multiplier_2 (
    .io_aSign (aReg_2[7]),
    .io_bSign (bReg_2[7]),
    .io_a     (aReg_2[2:0]),
    .io_b     (bReg_2[2:0]),
    .io_out   (_multiplier_2_io_out)
  );
  Multiplier multiplier_3 (
    .io_aSign (aReg_3[7]),
    .io_bSign (bReg_3[7]),
    .io_a     (aReg_3[2:0]),
    .io_b     (bReg_3[2:0]),
    .io_out   (_multiplier_3_io_out)
  );
  Multiplier multiplier_4 (
    .io_aSign (aReg_4[7]),
    .io_bSign (bReg_4[7]),
    .io_a     (aReg_4[2:0]),
    .io_b     (bReg_4[2:0]),
    .io_out   (_multiplier_4_io_out)
  );
  Multiplier multiplier_5 (
    .io_aSign (aReg_5[7]),
    .io_bSign (bReg_5[7]),
    .io_a     (aReg_5[2:0]),
    .io_b     (bReg_5[2:0]),
    .io_out   (_multiplier_5_io_out)
  );
  Multiplier multiplier_6 (
    .io_aSign (aReg_6[7]),
    .io_bSign (bReg_6[7]),
    .io_a     (aReg_6[2:0]),
    .io_b     (bReg_6[2:0]),
    .io_out   (_multiplier_6_io_out)
  );
  Multiplier multiplier_7 (
    .io_aSign (aReg_7[7]),
    .io_bSign (bReg_7[7]),
    .io_a     (aReg_7[2:0]),
    .io_b     (bReg_7[2:0]),
    .io_out   (_multiplier_7_io_out)
  );
  FiveBitsAdder fiveBitsAdder_0 (
    .io_a   (aReg_0[6:3]),
    .io_b   (bReg_0[6:3]),
    .io_out (_fiveBitsAdder_0_io_out)
  );
  FiveBitsAdder fiveBitsAdder_1 (
    .io_a   (aReg_1[6:3]),
    .io_b   (bReg_1[6:3]),
    .io_out (_fiveBitsAdder_1_io_out)
  );
  FiveBitsAdder fiveBitsAdder_2 (
    .io_a   (aReg_2[6:3]),
    .io_b   (bReg_2[6:3]),
    .io_out (_fiveBitsAdder_2_io_out)
  );
  FiveBitsAdder fiveBitsAdder_3 (
    .io_a   (aReg_3[6:3]),
    .io_b   (bReg_3[6:3]),
    .io_out (_fiveBitsAdder_3_io_out)
  );
  FiveBitsAdder fiveBitsAdder_4 (
    .io_a   (aReg_4[6:3]),
    .io_b   (bReg_4[6:3]),
    .io_out (_fiveBitsAdder_4_io_out)
  );
  FiveBitsAdder fiveBitsAdder_5 (
    .io_a   (aReg_5[6:3]),
    .io_b   (bReg_5[6:3]),
    .io_out (_fiveBitsAdder_5_io_out)
  );
  FiveBitsAdder fiveBitsAdder_6 (
    .io_a   (aReg_6[6:3]),
    .io_b   (bReg_6[6:3]),
    .io_out (_fiveBitsAdder_6_io_out)
  );
  FiveBitsAdder fiveBitsAdder_7 (
    .io_a   (aReg_7[6:3]),
    .io_b   (bReg_7[6:3]),
    .io_out (_fiveBitsAdder_7_io_out)
  );
  RightShifter rightShifter_0 (
    .clock        (clock),
    .io_inProduct (_multiplier_0_io_out),
    .io_inExp     (_fiveBitsAdder_0_io_out),
    .io_out       (_rightShifter_0_io_out)
  );
  RightShifter rightShifter_1 (
    .clock        (clock),
    .io_inProduct (_multiplier_1_io_out),
    .io_inExp     (_fiveBitsAdder_1_io_out),
    .io_out       (_rightShifter_1_io_out)
  );
  RightShifter rightShifter_2 (
    .clock        (clock),
    .io_inProduct (_multiplier_2_io_out),
    .io_inExp     (_fiveBitsAdder_2_io_out),
    .io_out       (_rightShifter_2_io_out)
  );
  RightShifter rightShifter_3 (
    .clock        (clock),
    .io_inProduct (_multiplier_3_io_out),
    .io_inExp     (_fiveBitsAdder_3_io_out),
    .io_out       (_rightShifter_3_io_out)
  );
  RightShifter rightShifter_4 (
    .clock        (clock),
    .io_inProduct (_multiplier_4_io_out),
    .io_inExp     (_fiveBitsAdder_4_io_out),
    .io_out       (_rightShifter_4_io_out)
  );
  RightShifter rightShifter_5 (
    .clock        (clock),
    .io_inProduct (_multiplier_5_io_out),
    .io_inExp     (_fiveBitsAdder_5_io_out),
    .io_out       (_rightShifter_5_io_out)
  );
  RightShifter rightShifter_6 (
    .clock        (clock),
    .io_inProduct (_multiplier_6_io_out),
    .io_inExp     (_fiveBitsAdder_6_io_out),
    .io_out       (_rightShifter_6_io_out)
  );
  RightShifter rightShifter_7 (
    .clock        (clock),
    .io_inProduct (_multiplier_7_io_out),
    .io_inExp     (_fiveBitsAdder_7_io_out),
    .io_out       (_rightShifter_7_io_out)
  );
  Reduction reduction (
    .io_in_0  (_rightShifter_0_io_out),
    .io_in_1  (_rightShifter_1_io_out),
    .io_in_2  (_rightShifter_2_io_out),
    .io_in_3  (_rightShifter_3_io_out),
    .io_in_4  (_rightShifter_4_io_out),
    .io_in_5  (_rightShifter_5_io_out),
    .io_in_6  (_rightShifter_6_io_out),
    .io_in_7  (_rightShifter_7_io_out),
    .io_out_0 (_reduction_io_out_0),
    .io_out_1 (_reduction_io_out_1),
    .io_out_2 (_reduction_io_out_2),
    .io_out_3 (_reduction_io_out_3)
  );
  Reduction_1 reduction2 (
    .io_in_0  (_reduction_io_out_0),
    .io_in_1  (_reduction_io_out_1),
    .io_in_2  (_reduction_io_out_2),
    .io_in_3  (_reduction_io_out_3),
    .io_out_0 (_reduction2_io_out_0),
    .io_out_1 (_reduction2_io_out_1)
  );
  Reduction_2 reduction3 (
    .io_in_0  (_reduction2_io_out_0),
    .io_in_1  (_reduction2_io_out_1),
    .io_out_0 (_reduction3_io_out_0)
  );
  assign io_out = acc;
endmodule

module NormalizationShifter(
  input         clock,
                reset,
  input  [36:0] io_in,
  output [31:0] io_out,
  input  [6:0]  io_scaleA,
                io_scaleB
);

  wire [6:0]  _scale_T = io_scaleA + io_scaleB;
  wire [35:0] preShift = io_in[36] ? ~(io_in[35:0]) + 36'h1 : io_in[35:0];
  wire [7:0]  _GEN =
    {{preShift[11:8], preShift[15:14]} & 6'h33, 2'h0} | {preShift[15:12], preShift[19:16]}
    & 8'h33;
  wire [18:0] _GEN_0 =
    {preShift[5:4],
     preShift[7:6],
     preShift[9:8],
     _GEN,
     preShift[19:18],
     preShift[21:20],
     preShift[23]} & 19'h55555;
  wire [3:0]  _GEN_1 = _GEN_0[18:15] | {preShift[7:6], preShift[9:8]} & 4'h5;
  wire [7:0]  _GEN_2 = _GEN_0[14:7] | _GEN & 8'h55;
  wire [3:0]  _GEN_3 = {_GEN_0[2:0], 1'h0} | {preShift[23:22], preShift[25:24]} & 4'h5;
  wire [5:0]  numLeadingZero =
    preShift[35]
      ? 6'h0
      : preShift[34]
          ? 6'h1
          : preShift[33]
              ? 6'h2
              : preShift[32]
                  ? 6'h3
                  : preShift[31]
                      ? 6'h4
                      : preShift[30]
                          ? 6'h5
                          : preShift[29]
                              ? 6'h6
                              : preShift[28]
                                  ? 6'h7
                                  : preShift[27]
                                      ? 6'h8
                                      : preShift[26]
                                          ? 6'h9
                                          : preShift[25]
                                              ? 6'hA
                                              : _GEN_3[0]
                                                  ? 6'hB
                                                  : _GEN_3[1]
                                                      ? 6'hC
                                                      : _GEN_3[2]
                                                          ? 6'hD
                                                          : _GEN_3[3]
                                                              ? 6'hE
                                                              : preShift[20]
                                                                  ? 6'hF
                                                                  : preShift[19]
                                                                      ? 6'h10
                                                                      : _GEN_0[5]
                                                                        | preShift[18]
                                                                          ? 6'h11
                                                                          : _GEN[1]
                                                                              ? 6'h12
                                                                              : _GEN_2[0]
                                                                                  ? 6'h13
                                                                                  : _GEN_2[1]
                                                                                      ? 6'h14
                                                                                      : _GEN_2[2]
                                                                                          ? 6'h15
                                                                                          : _GEN_2[3]
                                                                                              ? 6'h16
                                                                                              : _GEN_2[4]
                                                                                                  ? 6'h17
                                                                                                  : _GEN_2[5]
                                                                                                      ? 6'h18
                                                                                                      : _GEN_2[6]
                                                                                                          ? 6'h19
                                                                                                          : _GEN_2[7]
                                                                                                              ? 6'h1A
                                                                                                              : _GEN_1[0]
                                                                                                                  ? 6'h1B
                                                                                                                  : _GEN_1[1]
                                                                                                                      ? 6'h1C
                                                                                                                      : _GEN_1[2]
                                                                                                                          ? 6'h1D
                                                                                                                          : _GEN_1[3]
                                                                                                                              ? 6'h1E
                                                                                                                              : preShift[4]
                                                                                                                                  ? 6'h1F
                                                                                                                                  : preShift[3]
                                                                                                                                      ? 6'h20
                                                                                                                                      : preShift[2]
                                                                                                                                          ? 6'h21
                                                                                                                                          : {5'h11,
                                                                                                                                             ~(preShift[1])};
  wire [98:0] _shiftedMant_T = {63'h0, preShift} << numLeadingZero;
  wire [5:0]  _exp_T_3 = 6'h1A - (numLeadingZero + 6'h1);
  wire [7:0]  _exp_T_9 = {{2{_exp_T_3[5]}}, _exp_T_3} + 8'h7F - {_scale_T[6], _scale_T};
  wire [22:0] roundedMant =
    _shiftedMant_T[11] & _shiftedMant_T[12]
      ? _shiftedMant_T[34:12] + 23'h1
      : _shiftedMant_T[34:12];
  wire [31:0] io_out_0 = {io_in[36], _exp_T_9, roundedMant};
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & ~reset) begin
        $fwrite(32'h80000002, "fp32_out: %b\n", {io_in[36], _exp_T_9, roundedMant});
        $fwrite(32'h80000002, "out           : %b\n", io_out_0);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign io_out = io_out_0;
endmodule

module Top(
  input         clock,
                reset,
  input  [7:0]  io_inA_0,
                io_inA_1,
                io_inA_2,
                io_inA_3,
                io_inA_4,
                io_inA_5,
                io_inA_6,
                io_inA_7,
                io_inB_0,
                io_inB_1,
                io_inB_2,
                io_inB_3,
                io_inB_4,
                io_inB_5,
                io_inB_6,
                io_inB_7,
  input         io_clear,
  input  [6:0]  io_scaleA,
                io_scaleB,
  output [31:0] io_out
);

  wire [43:0] _fpu_io_out;
  Fpu fpu (
    .clock    (clock),
    .reset    (reset),
    .io_a_0   (io_inA_0),
    .io_a_1   (io_inA_1),
    .io_a_2   (io_inA_2),
    .io_a_3   (io_inA_3),
    .io_a_4   (io_inA_4),
    .io_a_5   (io_inA_5),
    .io_a_6   (io_inA_6),
    .io_a_7   (io_inA_7),
    .io_b_0   (io_inB_0),
    .io_b_1   (io_inB_1),
    .io_b_2   (io_inB_2),
    .io_b_3   (io_inB_3),
    .io_b_4   (io_inB_4),
    .io_b_5   (io_inB_5),
    .io_b_6   (io_inB_6),
    .io_b_7   (io_inB_7),
    .io_clear (io_clear),
    .io_out   (_fpu_io_out)
  );
  NormalizationShifter normalizationShifter (
    .clock     (clock),
    .reset     (reset),
    .io_in     (_fpu_io_out[36:0]),
    .io_out    (io_out),
    .io_scaleA (io_scaleA),
    .io_scaleB (io_scaleB)
  );
endmodule

