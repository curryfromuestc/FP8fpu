// Generated by CIRCT firtool-1.62.1
module Multiplier(
  input        io_aSign,
               io_bSign,
  input  [2:0] io_a,
               io_b,
  output [8:0] io_out
);

  wire [7:0] _sum_T_4 =
    {4'h0, io_b[0] ? {1'h1, io_a} : 4'h0} + {3'h0, io_b[1] ? {1'h1, io_a, 1'h0} : 5'h0}
    + {2'h0, io_b[2] ? {1'h1, io_a, 2'h0} : 6'h0} + {2'h1, io_a, 3'h0};
  wire       outSign = io_aSign ^ io_bSign;
  assign io_out = {outSign, outSign ? ~_sum_T_4 + 8'h1 : _sum_T_4};
endmodule

module FiveBitsAdder(
  input  [3:0] io_a,
               io_b,
  output [5:0] io_out
);

  wire [4:0] _aNobias_T_2 = {1'h0, io_a} - 5'h7;
  wire [4:0] _bNobias_T_2 = {1'h0, io_b} - 5'h7;
  assign io_out = {_aNobias_T_2[4], _aNobias_T_2} + {_bNobias_T_2[4], _bNobias_T_2};
endmodule

module RightShifter(
  input         clock,
  input  [8:0]  io_inProduct,
  input  [5:0]  io_inExp,
  output [44:0] io_out
);

  wire [5:0]  _shiftAmount_T = 6'h1A - io_inExp;
  reg  [15:0] shiftReg;
  always @(posedge clock)
    shiftReg <= $signed($signed({io_inProduct, 7'h0}) >>> _shiftAmount_T[2:0]);
  assign io_out =
    $signed($signed({shiftReg[15], shiftReg[12:0], 31'h0})
            >>> {39'h0, _shiftAmount_T[5:3], 3'h0});
endmodule

module Reduction(
  input  [44:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
                io_in_4,
                io_in_5,
                io_in_6,
                io_in_7,
  output [44:0] io_out_0,
                io_out_1,
                io_out_2,
                io_out_3
);

  assign io_out_0 = io_in_0 + io_in_1;
  assign io_out_1 = io_in_2 + io_in_3;
  assign io_out_2 = io_in_4 + io_in_5;
  assign io_out_3 = io_in_6 + io_in_7;
endmodule

module Reduction_1(
  input  [44:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
  output [44:0] io_out_0,
                io_out_1
);

  assign io_out_0 = io_in_0 + io_in_1;
  assign io_out_1 = io_in_2 + io_in_3;
endmodule

module Reduction_2(
  input  [44:0] io_in_0,
                io_in_1,
  output [44:0] io_out_0
);

  assign io_out_0 = io_in_0 + io_in_1;
endmodule

module NormalizationShifter(
  input         clock,
                reset,
  input  [44:0] io_in,
  output [31:0] io_out,
  input  [6:0]  io_scale_a,
                io_scale_b
);

  reg        sign;
  reg [23:0] shiftedMant;
  reg [7:0]  exp;
  reg        signNext;
  reg [7:0]  expNext;
  reg [22:0] roundedMant;
  always @(posedge clock) begin
    if (reset) begin
      sign <= 1'h0;
      shiftedMant <= 24'h0;
      exp <= 8'h0;
      signNext <= 1'h0;
      expNext <= 8'h0;
      roundedMant <= 23'h0;
    end
    else begin
      automatic logic [6:0]   _scale_T = io_scale_a + io_scale_b;
      automatic logic [43:0]  preShift = io_in[44] ? ~(io_in[43:0]) + 44'h1 : io_in[43:0];
      automatic logic [7:0]   _GEN =
        {{preShift[11:8], preShift[15:14]} & 6'h33, 2'h0}
        | {preShift[15:12], preShift[19:16]} & 8'h33;
      automatic logic [18:0]  _GEN_0 =
        {preShift[5:4],
         preShift[7:6],
         preShift[9:8],
         _GEN,
         preShift[19:18],
         preShift[21:20],
         preShift[23]} & 19'h55555;
      automatic logic [3:0]   _GEN_1 =
        _GEN_0[18:15] | {preShift[7:6], preShift[9:8]} & 4'h5;
      automatic logic [7:0]   _GEN_2 = _GEN_0[14:7] | _GEN & 8'h55;
      automatic logic [3:0]   _GEN_3 =
        {_GEN_0[2:0], 1'h0} | {preShift[23:22], preShift[25:24]} & 4'h5;
      automatic logic [5:0]   numLeadingZero =
        preShift[43]
          ? 6'h0
          : preShift[42]
              ? 6'h1
              : preShift[41]
                  ? 6'h2
                  : preShift[40]
                      ? 6'h3
                      : preShift[39]
                          ? 6'h4
                          : preShift[38]
                              ? 6'h5
                              : preShift[37]
                                  ? 6'h6
                                  : preShift[36]
                                      ? 6'h7
                                      : preShift[35]
                                          ? 6'h8
                                          : preShift[34]
                                              ? 6'h9
                                              : preShift[33]
                                                  ? 6'hA
                                                  : preShift[32]
                                                      ? 6'hB
                                                      : preShift[31]
                                                          ? 6'hC
                                                          : preShift[30]
                                                              ? 6'hD
                                                              : preShift[29]
                                                                  ? 6'hE
                                                                  : preShift[28]
                                                                      ? 6'hF
                                                                      : preShift[27]
                                                                          ? 6'h10
                                                                          : preShift[26]
                                                                              ? 6'h11
                                                                              : preShift[25]
                                                                                  ? 6'h12
                                                                                  : _GEN_3[0]
                                                                                      ? 6'h13
                                                                                      : _GEN_3[1]
                                                                                          ? 6'h14
                                                                                          : _GEN_3[2]
                                                                                              ? 6'h15
                                                                                              : _GEN_3[3]
                                                                                                  ? 6'h16
                                                                                                  : preShift[20]
                                                                                                      ? 6'h17
                                                                                                      : preShift[19]
                                                                                                          ? 6'h18
                                                                                                          : _GEN_0[5]
                                                                                                            | preShift[18]
                                                                                                              ? 6'h19
                                                                                                              : _GEN[1]
                                                                                                                  ? 6'h1A
                                                                                                                  : _GEN_2[0]
                                                                                                                      ? 6'h1B
                                                                                                                      : _GEN_2[1]
                                                                                                                          ? 6'h1C
                                                                                                                          : _GEN_2[2]
                                                                                                                              ? 6'h1D
                                                                                                                              : _GEN_2[3]
                                                                                                                                  ? 6'h1E
                                                                                                                                  : _GEN_2[4]
                                                                                                                                      ? 6'h1F
                                                                                                                                      : _GEN_2[5]
                                                                                                                                          ? 6'h20
                                                                                                                                          : _GEN_2[6]
                                                                                                                                              ? 6'h21
                                                                                                                                              : _GEN_2[7]
                                                                                                                                                  ? 6'h22
                                                                                                                                                  : _GEN_1[0]
                                                                                                                                                      ? 6'h23
                                                                                                                                                      : _GEN_1[1]
                                                                                                                                                          ? 6'h24
                                                                                                                                                          : _GEN_1[2]
                                                                                                                                                              ? 6'h25
                                                                                                                                                              : _GEN_1[3]
                                                                                                                                                                  ? 6'h26
                                                                                                                                                                  : preShift[4]
                                                                                                                                                                      ? 6'h27
                                                                                                                                                                      : preShift[3]
                                                                                                                                                                          ? 6'h28
                                                                                                                                                                          : preShift[2]
                                                                                                                                                                              ? 6'h29
                                                                                                                                                                              : {5'h15,
                                                                                                                                                                                 ~(preShift[1])};
      automatic logic [5:0]   _exp_T_3 = 6'h1A - (numLeadingZero + 6'h1);
      automatic logic [106:0] _shiftedMant_T = {63'h0, preShift} << numLeadingZero;
      sign <= io_in[44];
      shiftedMant <= _shiftedMant_T[42:19];
      exp <= {{2{_exp_T_3[5]}}, _exp_T_3} + 8'h7F - {_scale_T[6], _scale_T};
      signNext <= sign;
      expNext <= exp;
      roundedMant <=
        shiftedMant[0] & shiftedMant[1] ? shiftedMant[23:1] + 23'h1 : shiftedMant[23:1];
    end
  end // always @(posedge)
  assign io_out = {signNext, expNext, roundedMant};
endmodule

module Fpu(
  input         clock,
                reset,
  input  [7:0]  io_a_0,
                io_a_1,
                io_a_2,
                io_a_3,
                io_a_4,
                io_a_5,
                io_a_6,
                io_a_7,
                io_b_0,
                io_b_1,
                io_b_2,
                io_b_3,
                io_b_4,
                io_b_5,
                io_b_6,
                io_b_7,
  input  [6:0]  io_scale_a,
                io_scale_b,
  input         io_clear,
  output [31:0] io_out
);

  wire [44:0] _reduction3_io_out_0;
  wire [44:0] _reduction2_io_out_0;
  wire [44:0] _reduction2_io_out_1;
  wire [44:0] _reduction_io_out_0;
  wire [44:0] _reduction_io_out_1;
  wire [44:0] _reduction_io_out_2;
  wire [44:0] _reduction_io_out_3;
  wire [44:0] _rightShifter_7_io_out;
  wire [44:0] _rightShifter_6_io_out;
  wire [44:0] _rightShifter_5_io_out;
  wire [44:0] _rightShifter_4_io_out;
  wire [44:0] _rightShifter_3_io_out;
  wire [44:0] _rightShifter_2_io_out;
  wire [44:0] _rightShifter_1_io_out;
  wire [44:0] _rightShifter_0_io_out;
  wire [5:0]  _fiveBitsAdder_7_io_out;
  wire [5:0]  _fiveBitsAdder_6_io_out;
  wire [5:0]  _fiveBitsAdder_5_io_out;
  wire [5:0]  _fiveBitsAdder_4_io_out;
  wire [5:0]  _fiveBitsAdder_3_io_out;
  wire [5:0]  _fiveBitsAdder_2_io_out;
  wire [5:0]  _fiveBitsAdder_1_io_out;
  wire [5:0]  _fiveBitsAdder_0_io_out;
  wire [8:0]  _multiplier_7_io_out;
  wire [8:0]  _multiplier_6_io_out;
  wire [8:0]  _multiplier_5_io_out;
  wire [8:0]  _multiplier_4_io_out;
  wire [8:0]  _multiplier_3_io_out;
  wire [8:0]  _multiplier_2_io_out;
  wire [8:0]  _multiplier_1_io_out;
  wire [8:0]  _multiplier_0_io_out;
  reg  [44:0] acc;
  always @(posedge clock) begin
    if (reset)
      acc <= 45'h0;
    else if (io_clear)
      acc <= 45'h0;
    else
      acc <= acc + _reduction3_io_out_0;
  end // always @(posedge)
  Multiplier multiplier_0 (
    .io_aSign (io_a_0[7]),
    .io_bSign (io_b_0[7]),
    .io_a     (io_a_0[2:0]),
    .io_b     (io_b_0[2:0]),
    .io_out   (_multiplier_0_io_out)
  );
  Multiplier multiplier_1 (
    .io_aSign (io_a_1[7]),
    .io_bSign (io_b_1[7]),
    .io_a     (io_a_1[2:0]),
    .io_b     (io_b_1[2:0]),
    .io_out   (_multiplier_1_io_out)
  );
  Multiplier multiplier_2 (
    .io_aSign (io_a_2[7]),
    .io_bSign (io_b_2[7]),
    .io_a     (io_a_2[2:0]),
    .io_b     (io_b_2[2:0]),
    .io_out   (_multiplier_2_io_out)
  );
  Multiplier multiplier_3 (
    .io_aSign (io_a_3[7]),
    .io_bSign (io_b_3[7]),
    .io_a     (io_a_3[2:0]),
    .io_b     (io_b_3[2:0]),
    .io_out   (_multiplier_3_io_out)
  );
  Multiplier multiplier_4 (
    .io_aSign (io_a_4[7]),
    .io_bSign (io_b_4[7]),
    .io_a     (io_a_4[2:0]),
    .io_b     (io_b_4[2:0]),
    .io_out   (_multiplier_4_io_out)
  );
  Multiplier multiplier_5 (
    .io_aSign (io_a_5[7]),
    .io_bSign (io_b_5[7]),
    .io_a     (io_a_5[2:0]),
    .io_b     (io_b_5[2:0]),
    .io_out   (_multiplier_5_io_out)
  );
  Multiplier multiplier_6 (
    .io_aSign (io_a_6[7]),
    .io_bSign (io_b_6[7]),
    .io_a     (io_a_6[2:0]),
    .io_b     (io_b_6[2:0]),
    .io_out   (_multiplier_6_io_out)
  );
  Multiplier multiplier_7 (
    .io_aSign (io_a_7[7]),
    .io_bSign (io_b_7[7]),
    .io_a     (io_a_7[2:0]),
    .io_b     (io_b_7[2:0]),
    .io_out   (_multiplier_7_io_out)
  );
  FiveBitsAdder fiveBitsAdder_0 (
    .io_a   (io_a_0[6:3]),
    .io_b   (io_b_0[6:3]),
    .io_out (_fiveBitsAdder_0_io_out)
  );
  FiveBitsAdder fiveBitsAdder_1 (
    .io_a   (io_a_1[6:3]),
    .io_b   (io_b_1[6:3]),
    .io_out (_fiveBitsAdder_1_io_out)
  );
  FiveBitsAdder fiveBitsAdder_2 (
    .io_a   (io_a_2[6:3]),
    .io_b   (io_b_2[6:3]),
    .io_out (_fiveBitsAdder_2_io_out)
  );
  FiveBitsAdder fiveBitsAdder_3 (
    .io_a   (io_a_3[6:3]),
    .io_b   (io_b_3[6:3]),
    .io_out (_fiveBitsAdder_3_io_out)
  );
  FiveBitsAdder fiveBitsAdder_4 (
    .io_a   (io_a_4[6:3]),
    .io_b   (io_b_4[6:3]),
    .io_out (_fiveBitsAdder_4_io_out)
  );
  FiveBitsAdder fiveBitsAdder_5 (
    .io_a   (io_a_5[6:3]),
    .io_b   (io_b_5[6:3]),
    .io_out (_fiveBitsAdder_5_io_out)
  );
  FiveBitsAdder fiveBitsAdder_6 (
    .io_a   (io_a_6[6:3]),
    .io_b   (io_b_6[6:3]),
    .io_out (_fiveBitsAdder_6_io_out)
  );
  FiveBitsAdder fiveBitsAdder_7 (
    .io_a   (io_a_7[6:3]),
    .io_b   (io_b_7[6:3]),
    .io_out (_fiveBitsAdder_7_io_out)
  );
  RightShifter rightShifter_0 (
    .clock        (clock),
    .io_inProduct (_multiplier_0_io_out),
    .io_inExp     (_fiveBitsAdder_0_io_out),
    .io_out       (_rightShifter_0_io_out)
  );
  RightShifter rightShifter_1 (
    .clock        (clock),
    .io_inProduct (_multiplier_1_io_out),
    .io_inExp     (_fiveBitsAdder_1_io_out),
    .io_out       (_rightShifter_1_io_out)
  );
  RightShifter rightShifter_2 (
    .clock        (clock),
    .io_inProduct (_multiplier_2_io_out),
    .io_inExp     (_fiveBitsAdder_2_io_out),
    .io_out       (_rightShifter_2_io_out)
  );
  RightShifter rightShifter_3 (
    .clock        (clock),
    .io_inProduct (_multiplier_3_io_out),
    .io_inExp     (_fiveBitsAdder_3_io_out),
    .io_out       (_rightShifter_3_io_out)
  );
  RightShifter rightShifter_4 (
    .clock        (clock),
    .io_inProduct (_multiplier_4_io_out),
    .io_inExp     (_fiveBitsAdder_4_io_out),
    .io_out       (_rightShifter_4_io_out)
  );
  RightShifter rightShifter_5 (
    .clock        (clock),
    .io_inProduct (_multiplier_5_io_out),
    .io_inExp     (_fiveBitsAdder_5_io_out),
    .io_out       (_rightShifter_5_io_out)
  );
  RightShifter rightShifter_6 (
    .clock        (clock),
    .io_inProduct (_multiplier_6_io_out),
    .io_inExp     (_fiveBitsAdder_6_io_out),
    .io_out       (_rightShifter_6_io_out)
  );
  RightShifter rightShifter_7 (
    .clock        (clock),
    .io_inProduct (_multiplier_7_io_out),
    .io_inExp     (_fiveBitsAdder_7_io_out),
    .io_out       (_rightShifter_7_io_out)
  );
  Reduction reduction (
    .io_in_0  (_rightShifter_0_io_out),
    .io_in_1  (_rightShifter_1_io_out),
    .io_in_2  (_rightShifter_2_io_out),
    .io_in_3  (_rightShifter_3_io_out),
    .io_in_4  (_rightShifter_4_io_out),
    .io_in_5  (_rightShifter_5_io_out),
    .io_in_6  (_rightShifter_6_io_out),
    .io_in_7  (_rightShifter_7_io_out),
    .io_out_0 (_reduction_io_out_0),
    .io_out_1 (_reduction_io_out_1),
    .io_out_2 (_reduction_io_out_2),
    .io_out_3 (_reduction_io_out_3)
  );
  Reduction_1 reduction2 (
    .io_in_0  (_reduction_io_out_0),
    .io_in_1  (_reduction_io_out_1),
    .io_in_2  (_reduction_io_out_2),
    .io_in_3  (_reduction_io_out_3),
    .io_out_0 (_reduction2_io_out_0),
    .io_out_1 (_reduction2_io_out_1)
  );
  Reduction_2 reduction3 (
    .io_in_0  (_reduction2_io_out_0),
    .io_in_1  (_reduction2_io_out_1),
    .io_out_0 (_reduction3_io_out_0)
  );
  NormalizationShifter normalizationShifter (
    .clock      (clock),
    .reset      (reset),
    .io_in      (acc),
    .io_out     (io_out),
    .io_scale_a (io_scale_a),
    .io_scale_b (io_scale_b)
  );
endmodule

