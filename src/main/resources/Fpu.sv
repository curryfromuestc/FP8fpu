// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module FP32Accumulator(
  input         clock,
                reset,
  input  [31:0] io_input,
  input         io_clear,
  input  [6:0]  io_scale,
  output [53:0] io_result
);

  reg [31:0] accumulator;
  reg [53:0] shiftedMant;
  always @(posedge clock) begin
    if (reset) begin
      accumulator <= 32'h0;
      shiftedMant <= 54'h0;
    end
    else begin
      automatic logic [6:0]   _scaleAnchor_T = 7'h15 - io_scale;
      automatic logic [7:0]   _shiftAmount_T_1 =
        {_scaleAnchor_T[6], _scaleAnchor_T} - (accumulator[30:23] - 8'h7F);
      automatic logic [8:0]   shiftAmount = {_shiftAmount_T_1[7], _shiftAmount_T_1};
      automatic logic [8:0]   _shiftAmountAbs_T_4 =
        $signed(shiftAmount) < 9'sh0
          ? 9'h0 - {_shiftAmount_T_1[7], _shiftAmount_T_1}
          : shiftAmount;
      automatic logic [564:0] _shiftedMant_T =
        {{516{accumulator[31]}}, 1'h1, accumulator[22:0], 25'h0} << _shiftAmountAbs_T_4;
      accumulator <= io_clear ? 32'h0 : io_input;
      shiftedMant <=
        _shiftAmount_T_1[7]
          ? _shiftedMant_T[53:0]
          : $signed($signed({{5{accumulator[31]}}, 1'h1, accumulator[22:0], 25'h0})
                    >>> _shiftAmountAbs_T_4);
    end
  end // always @(posedge)
  assign io_result = shiftedMant;
endmodule

module Multiplier(
  input        io_aSign,
               io_bSign,
  input  [2:0] io_a,
               io_b,
  output [8:0] io_out
);

  assign io_out =
    {io_aSign ^ io_bSign,
     {4'h0, io_b[0] ? {1'h1, io_a} : 4'h0} + {3'h0, io_b[1] ? {1'h1, io_a, 1'h0} : 5'h0}
       + {2'h0, io_b[2] ? {1'h1, io_a, 2'h0} : 6'h0} + {2'h1, io_a, 3'h0}};
endmodule

module FiveBitsAdder(
  input  [3:0] io_a,
               io_b,
  output [4:0] io_out
);

  assign io_out = {1'h0, io_a} + {1'h0, io_b} - 5'hE;
endmodule

module RightShifter(
  input         clock,
  input  [8:0]  io_inProduct,
  input  [4:0]  io_inExp,
  output [41:0] io_out
);

  wire [5:0]  _shiftAmount_T = 6'h15 - {io_inExp[4], io_inExp};
  reg  [15:0] shiftReg;
  always @(posedge clock)
    shiftReg <= $signed($signed({io_inProduct, 7'h0}) >>> _shiftAmount_T[2:0]);
  assign io_out =
    $signed($signed({shiftReg[15], shiftReg[12:0], 28'h0})
            >>> {36'h0, _shiftAmount_T[5:3], 3'h0});
endmodule

module Reduction(
  input  [41:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
                io_in_4,
                io_in_5,
                io_in_6,
                io_in_7,
  output [41:0] io_out_0,
                io_out_1,
                io_out_2,
                io_out_3
);

  assign io_out_0 = io_in_0 + io_in_1;
  assign io_out_1 = io_in_2 + io_in_3;
  assign io_out_2 = io_in_4 + io_in_5;
  assign io_out_3 = io_in_6 + io_in_7;
endmodule

module Reduction_1(
  input  [41:0] io_in_0,
                io_in_1,
                io_in_2,
                io_in_3,
  output [41:0] io_out_0,
                io_out_1
);

  assign io_out_0 = io_in_0 + io_in_1;
  assign io_out_1 = io_in_2 + io_in_3;
endmodule

module Reduction_2(
  input  [41:0] io_in_0,
                io_in_1,
  output [41:0] io_out_0
);

  assign io_out_0 = io_in_0 + io_in_1;
endmodule

module NormalizationShifter(
  input         clock,
                reset,
  input  [54:0] io_in,
  output [31:0] io_out,
  input  [6:0]  io_scale
);

  reg         sign;
  wire [53:0] preShift = io_in[54] ? ~(io_in[53:0]) + 54'h1 : io_in[53:0];
  wire [7:0]  _GEN =
    {{preShift[11:8], preShift[15:14]} & 6'h33, 2'h0} | {preShift[15:12], preShift[19:16]}
    & 8'h33;
  wire [18:0] _GEN_0 =
    {preShift[5:4],
     preShift[7:6],
     preShift[9:8],
     _GEN,
     preShift[19:18],
     preShift[21:20],
     preShift[23]} & 19'h55555;
  wire [3:0]  _GEN_1 = _GEN_0[18:15] | {preShift[7:6], preShift[9:8]} & 4'h5;
  wire [7:0]  _GEN_2 = _GEN_0[14:7] | _GEN & 8'h55;
  wire [3:0]  _GEN_3 = {_GEN_0[2:0], 1'h0} | {preShift[23:22], preShift[25:24]} & 4'h5;
  wire [3:0]  _GEN_4 =
    {{preShift[37:36], preShift[39]} & 3'h5, 1'h0} | {preShift[39:38], preShift[41:40]}
    & 4'h5;
  wire [5:0]  numLeadingZero =
    preShift[53]
      ? 6'h0
      : preShift[52]
          ? 6'h1
          : preShift[51]
              ? 6'h2
              : preShift[50]
                  ? 6'h3
                  : preShift[49]
                      ? 6'h4
                      : preShift[48]
                          ? 6'h5
                          : preShift[47]
                              ? 6'h6
                              : preShift[46]
                                  ? 6'h7
                                  : preShift[45]
                                      ? 6'h8
                                      : preShift[44]
                                          ? 6'h9
                                          : preShift[43]
                                              ? 6'hA
                                              : preShift[42]
                                                  ? 6'hB
                                                  : preShift[41]
                                                      ? 6'hC
                                                      : _GEN_4[0]
                                                          ? 6'hD
                                                          : _GEN_4[1]
                                                              ? 6'hE
                                                              : _GEN_4[2]
                                                                  ? 6'hF
                                                                  : _GEN_4[3]
                                                                      ? 6'h10
                                                                      : preShift[36]
                                                                          ? 6'h11
                                                                          : preShift[35]
                                                                              ? 6'h12
                                                                              : preShift[34]
                                                                                  ? 6'h13
                                                                                  : preShift[33]
                                                                                      ? 6'h14
                                                                                      : preShift[32]
                                                                                          ? 6'h15
                                                                                          : preShift[31]
                                                                                              ? 6'h16
                                                                                              : preShift[30]
                                                                                                  ? 6'h17
                                                                                                  : preShift[29]
                                                                                                      ? 6'h18
                                                                                                      : preShift[28]
                                                                                                          ? 6'h19
                                                                                                          : preShift[27]
                                                                                                              ? 6'h1A
                                                                                                              : preShift[26]
                                                                                                                  ? 6'h1B
                                                                                                                  : preShift[25]
                                                                                                                      ? 6'h1C
                                                                                                                      : _GEN_3[0]
                                                                                                                          ? 6'h1D
                                                                                                                          : _GEN_3[1]
                                                                                                                              ? 6'h1E
                                                                                                                              : _GEN_3[2]
                                                                                                                                  ? 6'h1F
                                                                                                                                  : _GEN_3[3]
                                                                                                                                      ? 6'h20
                                                                                                                                      : preShift[20]
                                                                                                                                          ? 6'h21
                                                                                                                                          : preShift[19]
                                                                                                                                              ? 6'h22
                                                                                                                                              : _GEN_0[5]
                                                                                                                                                | preShift[18]
                                                                                                                                                  ? 6'h23
                                                                                                                                                  : _GEN[1]
                                                                                                                                                      ? 6'h24
                                                                                                                                                      : _GEN_2[0]
                                                                                                                                                          ? 6'h25
                                                                                                                                                          : _GEN_2[1]
                                                                                                                                                              ? 6'h26
                                                                                                                                                              : _GEN_2[2]
                                                                                                                                                                  ? 6'h27
                                                                                                                                                                  : _GEN_2[3]
                                                                                                                                                                      ? 6'h28
                                                                                                                                                                      : _GEN_2[4]
                                                                                                                                                                          ? 6'h29
                                                                                                                                                                          : _GEN_2[5]
                                                                                                                                                                              ? 6'h2A
                                                                                                                                                                              : _GEN_2[6]
                                                                                                                                                                                  ? 6'h2B
                                                                                                                                                                                  : _GEN_2[7]
                                                                                                                                                                                      ? 6'h2C
                                                                                                                                                                                      : _GEN_1[0]
                                                                                                                                                                                          ? 6'h2D
                                                                                                                                                                                          : _GEN_1[1]
                                                                                                                                                                                              ? 6'h2E
                                                                                                                                                                                              : _GEN_1[2]
                                                                                                                                                                                                  ? 6'h2F
                                                                                                                                                                                                  : _GEN_1[3]
                                                                                                                                                                                                      ? 6'h30
                                                                                                                                                                                                      : preShift[4]
                                                                                                                                                                                                          ? 6'h31
                                                                                                                                                                                                          : preShift[3]
                                                                                                                                                                                                              ? 6'h32
                                                                                                                                                                                                              : preShift[2]
                                                                                                                                                                                                                  ? 6'h33
                                                                                                                                                                                                                  : {5'h1A,
                                                                                                                                                                                                                     ~(preShift[1])};
  reg  [23:0] shiftedMant;
  reg  [5:0]  shiftAmount;
  reg         shiftDirection;
  reg         signNext;
  reg  [22:0] roundedMant;
  wire [5:0]  _exp_T_1 = shiftAmount + 6'h15;
  wire [7:0]  _GEN_5 = {io_scale[6], io_scale};
  wire [5:0]  _exp_T_11 = 6'h15 - shiftAmount;
  wire [7:0]  exp =
    shiftDirection
      ? {{2{_exp_T_1[5]}}, _exp_T_1} + 8'h7F - _GEN_5
      : {{2{_exp_T_11[5]}}, _exp_T_11} + 8'h7F - _GEN_5;
  wire [31:0] io_out_0 = {signNext, exp, roundedMant};
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & ~reset) begin
        $fwrite(32'h80000002, "in            : %b\n", io_in);
        $fwrite(32'h80000002, "sign          : %b\n", sign);
        $fwrite(32'h80000002, "mant          : %b\n", io_in[53:0]);
        $fwrite(32'h80000002, "preShift      : %b\n", preShift);
        $fwrite(32'h80000002, "numLeadingZero: %b\n", numLeadingZero);
        $fwrite(32'h80000002, "shiftAmount   : %b\n", shiftAmount);
        $fwrite(32'h80000002, "shiftDirection: %b\n", shiftDirection);
        $fwrite(32'h80000002, "shiftedMant   : %b\n", shiftedMant);
        $fwrite(32'h80000002, "signNext      : %b\n", signNext);
        $fwrite(32'h80000002, "roundedMant   : %b\n", roundedMant);
        $fwrite(32'h80000002, "exp           : %b\n", exp);
        $fwrite(32'h80000002, "out           : %b\n", io_out_0);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      sign <= 1'h0;
      shiftedMant <= 24'h0;
      shiftAmount <= 6'h0;
      shiftDirection <= 1'h0;
      signNext <= 1'h0;
      roundedMant <= 23'h0;
    end
    else begin
      automatic logic         _GEN_6 = numLeadingZero < 6'h4;
      automatic logic [116:0] _shiftedMant_T = {63'h0, preShift} << numLeadingZero;
      sign <= io_in[54];
      shiftedMant <= _shiftedMant_T[52:29];
      shiftAmount <= _GEN_6 ? 6'h4 - numLeadingZero : numLeadingZero - 6'h4;
      shiftDirection <= _GEN_6;
      signNext <= sign;
      roundedMant <=
        shiftedMant[0] & shiftedMant[1] ? shiftedMant[23:1] + 23'h1 : shiftedMant[23:1];
    end
  end // always @(posedge)
  assign io_out = io_out_0;
endmodule

module Fpu(
  input         clock,
                reset,
  input  [7:0]  io_a_0,
                io_a_1,
                io_a_2,
                io_a_3,
                io_a_4,
                io_a_5,
                io_a_6,
                io_a_7,
                io_b_0,
                io_b_1,
                io_b_2,
                io_b_3,
                io_b_4,
                io_b_5,
                io_b_6,
                io_b_7,
  input  [6:0]  io_scale,
  input  [31:0] io_accIn,
  input         io_clear,
  output [31:0] io_out
);

  wire [31:0] _normalizationShifter_io_out;
  wire [41:0] _reduction3_io_out_0;
  wire [41:0] _reduction2_io_out_0;
  wire [41:0] _reduction2_io_out_1;
  wire [41:0] _reduction_io_out_0;
  wire [41:0] _reduction_io_out_1;
  wire [41:0] _reduction_io_out_2;
  wire [41:0] _reduction_io_out_3;
  wire [41:0] _rightShifter_7_io_out;
  wire [41:0] _rightShifter_6_io_out;
  wire [41:0] _rightShifter_5_io_out;
  wire [41:0] _rightShifter_4_io_out;
  wire [41:0] _rightShifter_3_io_out;
  wire [41:0] _rightShifter_2_io_out;
  wire [41:0] _rightShifter_1_io_out;
  wire [41:0] _rightShifter_0_io_out;
  wire [4:0]  _fiveBitsAdder_7_io_out;
  wire [4:0]  _fiveBitsAdder_6_io_out;
  wire [4:0]  _fiveBitsAdder_5_io_out;
  wire [4:0]  _fiveBitsAdder_4_io_out;
  wire [4:0]  _fiveBitsAdder_3_io_out;
  wire [4:0]  _fiveBitsAdder_2_io_out;
  wire [4:0]  _fiveBitsAdder_1_io_out;
  wire [4:0]  _fiveBitsAdder_0_io_out;
  wire [8:0]  _multiplier_7_io_out;
  wire [8:0]  _multiplier_6_io_out;
  wire [8:0]  _multiplier_5_io_out;
  wire [8:0]  _multiplier_4_io_out;
  wire [8:0]  _multiplier_3_io_out;
  wire [8:0]  _multiplier_2_io_out;
  wire [8:0]  _multiplier_1_io_out;
  wire [8:0]  _multiplier_0_io_out;
  wire [53:0] _acc_io_result;
  reg  [54:0] preNormalization;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & ~reset) begin
        $fwrite(32'h80000002, "shiftedProduct(0): %b\n", _rightShifter_0_io_out);
        $fwrite(32'h80000002, "shiftedProduct(1): %b\n", _rightShifter_1_io_out);
        $fwrite(32'h80000002, "shiftedProduct(2): %b\n", _rightShifter_2_io_out);
        $fwrite(32'h80000002, "shiftedProduct(3): %b\n", _rightShifter_3_io_out);
        $fwrite(32'h80000002, "shiftedProduct(4): %b\n", _rightShifter_4_io_out);
        $fwrite(32'h80000002, "shiftedProduct(5): %b\n", _rightShifter_5_io_out);
        $fwrite(32'h80000002, "shiftedProduct(6): %b\n", _rightShifter_6_io_out);
        $fwrite(32'h80000002, "shiftedProduct(7): %b\n", _rightShifter_7_io_out);
        $fwrite(32'h80000002, "reducedProduct3  : %b\n", _reduction3_io_out_0);
        $fwrite(32'h80000002, "lengh of alignedProduct: %d\n", 6'h36);
        $fwrite(32'h80000002, "shiftedAcc: %b\n", _acc_io_result);
        $fwrite(32'h80000002, "preNormalization: %b\n", preNormalization);
        $fwrite(32'h80000002, "length of preNormalization: %d\n", 6'h37);
        $fwrite(32'h80000002, "out: %b\n", _normalizationShifter_io_out);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset)
      preNormalization <= 55'h0;
    else begin
      automatic logic [53:0] _preNormalization_T =
        {{5{_reduction3_io_out_0[41]}}, _reduction3_io_out_0, 7'h0} + _acc_io_result;
      preNormalization <= {_preNormalization_T[53], _preNormalization_T};
    end
  end // always @(posedge)
  FP32Accumulator acc (
    .clock     (clock),
    .reset     (reset),
    .io_input  (io_accIn),
    .io_clear  (io_clear),
    .io_scale  (io_scale),
    .io_result (_acc_io_result)
  );
  Multiplier multiplier_0 (
    .io_aSign (io_a_0[7]),
    .io_bSign (io_b_0[7]),
    .io_a     (io_a_0[2:0]),
    .io_b     (io_b_0[2:0]),
    .io_out   (_multiplier_0_io_out)
  );
  Multiplier multiplier_1 (
    .io_aSign (io_a_1[7]),
    .io_bSign (io_b_1[7]),
    .io_a     (io_a_1[2:0]),
    .io_b     (io_b_1[2:0]),
    .io_out   (_multiplier_1_io_out)
  );
  Multiplier multiplier_2 (
    .io_aSign (io_a_2[7]),
    .io_bSign (io_b_2[7]),
    .io_a     (io_a_2[2:0]),
    .io_b     (io_b_2[2:0]),
    .io_out   (_multiplier_2_io_out)
  );
  Multiplier multiplier_3 (
    .io_aSign (io_a_3[7]),
    .io_bSign (io_b_3[7]),
    .io_a     (io_a_3[2:0]),
    .io_b     (io_b_3[2:0]),
    .io_out   (_multiplier_3_io_out)
  );
  Multiplier multiplier_4 (
    .io_aSign (io_a_4[7]),
    .io_bSign (io_b_4[7]),
    .io_a     (io_a_4[2:0]),
    .io_b     (io_b_4[2:0]),
    .io_out   (_multiplier_4_io_out)
  );
  Multiplier multiplier_5 (
    .io_aSign (io_a_5[7]),
    .io_bSign (io_b_5[7]),
    .io_a     (io_a_5[2:0]),
    .io_b     (io_b_5[2:0]),
    .io_out   (_multiplier_5_io_out)
  );
  Multiplier multiplier_6 (
    .io_aSign (io_a_6[7]),
    .io_bSign (io_b_6[7]),
    .io_a     (io_a_6[2:0]),
    .io_b     (io_b_6[2:0]),
    .io_out   (_multiplier_6_io_out)
  );
  Multiplier multiplier_7 (
    .io_aSign (io_a_7[7]),
    .io_bSign (io_b_7[7]),
    .io_a     (io_a_7[2:0]),
    .io_b     (io_b_7[2:0]),
    .io_out   (_multiplier_7_io_out)
  );
  FiveBitsAdder fiveBitsAdder_0 (
    .io_a   (io_a_0[6:3]),
    .io_b   (io_b_0[6:3]),
    .io_out (_fiveBitsAdder_0_io_out)
  );
  FiveBitsAdder fiveBitsAdder_1 (
    .io_a   (io_a_1[6:3]),
    .io_b   (io_b_1[6:3]),
    .io_out (_fiveBitsAdder_1_io_out)
  );
  FiveBitsAdder fiveBitsAdder_2 (
    .io_a   (io_a_2[6:3]),
    .io_b   (io_b_2[6:3]),
    .io_out (_fiveBitsAdder_2_io_out)
  );
  FiveBitsAdder fiveBitsAdder_3 (
    .io_a   (io_a_3[6:3]),
    .io_b   (io_b_3[6:3]),
    .io_out (_fiveBitsAdder_3_io_out)
  );
  FiveBitsAdder fiveBitsAdder_4 (
    .io_a   (io_a_4[6:3]),
    .io_b   (io_b_4[6:3]),
    .io_out (_fiveBitsAdder_4_io_out)
  );
  FiveBitsAdder fiveBitsAdder_5 (
    .io_a   (io_a_5[6:3]),
    .io_b   (io_b_5[6:3]),
    .io_out (_fiveBitsAdder_5_io_out)
  );
  FiveBitsAdder fiveBitsAdder_6 (
    .io_a   (io_a_6[6:3]),
    .io_b   (io_b_6[6:3]),
    .io_out (_fiveBitsAdder_6_io_out)
  );
  FiveBitsAdder fiveBitsAdder_7 (
    .io_a   (io_a_7[6:3]),
    .io_b   (io_b_7[6:3]),
    .io_out (_fiveBitsAdder_7_io_out)
  );
  RightShifter rightShifter_0 (
    .clock        (clock),
    .io_inProduct (_multiplier_0_io_out),
    .io_inExp     (_fiveBitsAdder_0_io_out),
    .io_out       (_rightShifter_0_io_out)
  );
  RightShifter rightShifter_1 (
    .clock        (clock),
    .io_inProduct (_multiplier_1_io_out),
    .io_inExp     (_fiveBitsAdder_1_io_out),
    .io_out       (_rightShifter_1_io_out)
  );
  RightShifter rightShifter_2 (
    .clock        (clock),
    .io_inProduct (_multiplier_2_io_out),
    .io_inExp     (_fiveBitsAdder_2_io_out),
    .io_out       (_rightShifter_2_io_out)
  );
  RightShifter rightShifter_3 (
    .clock        (clock),
    .io_inProduct (_multiplier_3_io_out),
    .io_inExp     (_fiveBitsAdder_3_io_out),
    .io_out       (_rightShifter_3_io_out)
  );
  RightShifter rightShifter_4 (
    .clock        (clock),
    .io_inProduct (_multiplier_4_io_out),
    .io_inExp     (_fiveBitsAdder_4_io_out),
    .io_out       (_rightShifter_4_io_out)
  );
  RightShifter rightShifter_5 (
    .clock        (clock),
    .io_inProduct (_multiplier_5_io_out),
    .io_inExp     (_fiveBitsAdder_5_io_out),
    .io_out       (_rightShifter_5_io_out)
  );
  RightShifter rightShifter_6 (
    .clock        (clock),
    .io_inProduct (_multiplier_6_io_out),
    .io_inExp     (_fiveBitsAdder_6_io_out),
    .io_out       (_rightShifter_6_io_out)
  );
  RightShifter rightShifter_7 (
    .clock        (clock),
    .io_inProduct (_multiplier_7_io_out),
    .io_inExp     (_fiveBitsAdder_7_io_out),
    .io_out       (_rightShifter_7_io_out)
  );
  Reduction reduction (
    .io_in_0  (_rightShifter_0_io_out),
    .io_in_1  (_rightShifter_1_io_out),
    .io_in_2  (_rightShifter_2_io_out),
    .io_in_3  (_rightShifter_3_io_out),
    .io_in_4  (_rightShifter_4_io_out),
    .io_in_5  (_rightShifter_5_io_out),
    .io_in_6  (_rightShifter_6_io_out),
    .io_in_7  (_rightShifter_7_io_out),
    .io_out_0 (_reduction_io_out_0),
    .io_out_1 (_reduction_io_out_1),
    .io_out_2 (_reduction_io_out_2),
    .io_out_3 (_reduction_io_out_3)
  );
  Reduction_1 reduction2 (
    .io_in_0  (_reduction_io_out_0),
    .io_in_1  (_reduction_io_out_1),
    .io_in_2  (_reduction_io_out_2),
    .io_in_3  (_reduction_io_out_3),
    .io_out_0 (_reduction2_io_out_0),
    .io_out_1 (_reduction2_io_out_1)
  );
  Reduction_2 reduction3 (
    .io_in_0  (_reduction2_io_out_0),
    .io_in_1  (_reduction2_io_out_1),
    .io_out_0 (_reduction3_io_out_0)
  );
  NormalizationShifter normalizationShifter (
    .clock    (clock),
    .reset    (reset),
    .io_in    (preNormalization),
    .io_out   (_normalizationShifter_io_out),
    .io_scale (io_scale)
  );
  assign io_out = _normalizationShifter_io_out;
endmodule

